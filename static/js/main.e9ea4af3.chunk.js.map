{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","list","username","onChangeHandler","e","setState","target","value","scoreOf","user","followers","following","public_repos","public_gists","onSubmitHandler","userFlag","some","val","login","preventDefault","fetch","then","data","json","message","alert","concat","sort","a","b","Container","Jumbotron","style","display","justifyContent","marginTop","Form","onSubmit","this","Row","className","Col","xs","Label","htmlFor","srOnly","InputGroup","Prepend","Text","FormControl","id","placeholder","onChange","Button","disabled","trim","type","map","idx","key","color","textDecoration","href","html_url","Card","marginBottom","marginLeft","sm","md","Image","src","avatar_url","height","padding","roundedCircle","flexDirection","Title","name","Subtitle","alignItems","paddingLeft","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e9ea4af3.chunk.js","sourcesContent":["import { useScrollTrigger } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport { Form, Button, Col, InputGroup, FormControl, Row, Card, Container, Image, Alert, Jumbotron } from 'react-bootstrap'\nclass App extends Component {\n  state = {\n    list: [],\n    username: \"\"\n  }\n\n  onChangeHandler = (e) => {\n    this.setState({\n      username: e.target.value\n    })\n  }\n\n  scoreOf = user => {\n    const score = 0.30 * user.followers + 0.20 * user.following + 0.30 * user.public_repos + 0.20 * user.public_gists\n    //console.log(score)\n    return score\n  }\n\n  onSubmitHandler = e => {\n\n    const userFlag = this.state.list.some(val => {\n      return val.login === e.target.username.value\n    })\n\n    e.preventDefault()\n    //console.log(e.target.username.value)\n    this.setState({\n      username: \"\"\n    })\n\n    fetch(\"https://api.github.com/users/\" + e.target.username.value)\n      .then(data => data.json())\n      .then(data => {\n        if (!data.message && !userFlag) {\n          this.setState({\n            list: this.state.list.concat(data).sort((a, b) => this.scoreOf(b) - this.scoreOf(a)),\n          })\n        } else {\n          \n          if (userFlag) {\n            alert(\"User already exists\")\n          } else {\n            alert(\"Username not available\")\n          }\n        }\n      })\n  }\n  render() {\n    return (\n      <div>\n        <Container>\n          <Jumbotron>\n            <h1 style={{display:\"flex\" , justifyContent:\"center\"}}>GITHUB COMPARE</h1>\n          </Jumbotron>\n        </Container>\n        <div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"20px\" }}>\n          <Form onSubmit={this.onSubmitHandler}>\n            <Form.Row className=\"align-items-center\">\n              <Col xs=\"auto\" className=\"my-1\">\n                <Form.Label htmlFor=\"inlineFormInputGroupUsername\" srOnly>\n                  Username\n            </Form.Label>\n                <InputGroup>\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>@</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl value={this.state.username} id=\"username\" placeholder=\"Github Username\" onChange={this.onChangeHandler} />\n                </InputGroup>\n              </Col>\n              <Col xs=\"auto\" className=\"my-1\">\n                <Button disabled={this.state.username.trim()=== ''} type=\"submit\">Submit</Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </div>\n        <Container style={{ marginTop: \"20px\" }}>\n          <ol>\n            {this.state.list.map((user, idx) => {\n              return <li key={user.id} >\n                <a style={{ color: \"inherit\", textDecoration: \"none\" }} target=\"_blank\" href={user.html_url}><Card style={{ marginTop: \"5px\", marginBottom: \"5px\", marginLeft: \"5px\" }} >\n                  <Row>\n                    <Col sm={3} md={2} xs={4}>\n                      <Image src={user.avatar_url} height=\"100px\" style={{ padding: \"10px\" }} roundedCircle />\n                    </Col>\n                    <Col sm={5} xs={8} style={{ display: \"flex\", justifyContent: \"center\", flexDirection: \"column\" }}>\n                      <Row><Card.Title>{user.name}</Card.Title></Row>\n                      <Row><Card.Subtitle>{user.login}</Card.Subtitle></Row>\n                    </Col>\n                    <Col style={{ display: \"flex\", justifyContent: \"center\", flexDirection: \"column\" }}>\n                      <Row>\n                        <Col style={{ display: \"flex\", alignItems: \"center\", flexDirection: \"column\", marginLeft: \"15px\" }}>\n                          <Row><Card.Text>Repositories</Card.Text></Row>\n                          <Row ><Card.Text>{user.public_repos}</Card.Text></Row>\n                        </Col>\n                        <Col style={{ display: \"flex\", alignItems: \"center\", flexDirection: \"column\" }}>\n                          <Row><Card.Text>Followers</Card.Text></Row>\n                          <Row><Card.Text>{user.followers}</Card.Text></Row>\n                        </Col>\n                        <Col style={{ display: \"flex\", alignItems: \"center\", flexDirection: \"column\", paddingLeft: \"0px\" }}>\n                          <Row><Card.Text>Gists</Card.Text></Row>\n                          <Row><Card.Text>{user.public_gists}</Card.Text></Row>\n                        </Col>\n                      </Row>\n                    </Col>\n                  </Row>\n                </Card> </a>\n              </li>\n            })}\n          </ol>\n        </Container>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}